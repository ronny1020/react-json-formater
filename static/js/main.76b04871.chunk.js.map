{"version":3,"sources":["../../src/index.js","App.js","index.js"],"names":["JsonFormatter","JsonStyle","jsonObject","JSON","repeatTabSpace","times","repeatedTabSpace","i","style","key","repeat","tabWith","TabSpaceRepeatTimes","Object","numberStyle","stringStyle","data","booleanTrueStyle","booleanFalseStyle","dataJSX","braceStyle","keys","propertyStyle","colonStyle","categorize","commaStyle","bracketStyle","nullStyle","App","json","color","ReactDOM","render","document","getElementById"],"mappings":"sNAEaA,EAAgB,SAAC,GAAiC,IAAjC,EAAiC,EAAjC,OAAiC,EAAjC,QAAiBC,EAAgB,EAAhBA,UACvCC,EAAaC,WAAnB,GAEMC,EAAkBC,YAEtB,IADA,IAAMC,EAAN,GACSC,EAAT,EAAgBA,EAAhB,EAA2BA,IACzBD,OACE,0BAAME,MAAOP,EAAb,cAAsCQ,IAAKF,GACxC,OAAOG,OAAOC,GAFnBL,KAMF,UAEEM,EAAJ,EAmGA,OACE,yBAAKJ,MAAOP,EAAUO,OACpB,6BAnGJ,cACE,OAAQK,+BAAR,IACE,sBAGE,OAFgB,0BAAML,MAAOP,EAAUa,aAAvC,GAKF,sBAEE,OADgB,0BAAMN,MAAOP,EAAUc,aAAvB,MAAhB,KAIF,uBAME,OALgBC,EACd,0BAAMR,MAAOP,EAAUgB,kBADL,QAGlB,0BAAMT,MAAOP,EAAUiB,mBAHzB,SAQF,sBACE,IAAMC,EAAN,GACAA,OACE,kBAAC,IAAD,UAAgBV,IAAK,KACnB,0BAAMD,MAAOP,EAAUmB,YADzB,KAEE,uBAHJD,QAMA,IAAME,EAAOR,YAAb,GAEA,IAAK,IAAL,KADAD,IACA,EACEO,OACE,kBAAC,IAAD,UAAgBV,IAAKF,GAClBH,EADH,GAEE,0BAAMI,MAAOP,EAAUqB,eAAgB,IAFzC,EAEyC,KACvC,0BAAMd,MAAOP,EAAUsB,YAHzB,MAIGC,EAAWR,EAJd,IAKGT,IAAMc,EAAKA,SAAXd,QACC,0BAAMC,MAAOP,EAAUwB,YAN3B,KAQE,uBATJN,QAoBF,OAPAP,IACAO,OACE,kBAAC,IAAD,UAAgBV,IAAK,KAClBL,EADH,GAEE,0BAAMI,MAAOP,EAAUmB,YAH3BD,OAMA,EAGF,qBACE,IAAMA,EAAN,GAEAA,OACE,kBAAC,IAAD,UAAgBV,IAAI,KAClB,0BAAMD,MAAOP,EAAUyB,cADzB,KAEE,uBAHJP,QAMAP,IACA,IAAK,IAAIL,EAAT,EAAgBA,EAAIS,EAApB,OAAiCT,IAC/BY,OACE,kBAAC,IAAD,UAAgBV,IAAKF,GAClBH,EADH,GAEGoB,EAAWR,EAFd,IAGGT,IAAMS,SAANT,OACC,0BAAMC,MAAOP,EAAUwB,YAJ3B,KAME,uBAPJN,QAkBF,OAPAP,IACAO,OACE,kBAAC,IAAD,UAAgBV,IAAI,KACjBL,EADH,GAEE,0BAAMI,MAAOP,EAAUyB,cAH3BP,OAMA,EAGF,oBAEE,OADgB,0BAAMX,MAAOP,EAAU0B,WAAvC,SAUIH,CAFV,MC/DaI,EAhDH,WA6CV,OAAO,kBAAC,EAAD,CAAeC,KA5CV,ygBA4CwBlB,QAAQ,IAAIV,UAN9B,CAChBqB,cAAe,CAAEQ,MAAO,OACxBf,YAAa,CAAEe,MAAO,SACtBhB,YAAa,CAAEgB,MAAO,kB,OC1C1BC,EAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.76b04871.chunk.js","sourcesContent":["import React from 'react'\n\nexport const JsonFormatter = ({ json, tabWith, JsonStyle }) => {\n  const jsonObject = JSON.parse(json)\n\n  const repeatTabSpace = (times) => {\n    const repeatedTabSpace = []\n    for (let i = 0; i < times; i++) {\n      repeatedTabSpace.push(\n        <span style={JsonStyle.tabSpaceStyle} key={i}>\n          {'\\xa0'.repeat(tabWith || 4)}\n        </span>\n      )\n    }\n    return repeatedTabSpace\n  }\n  let TabSpaceRepeatTimes = 0\n\n  function categorize(data) {\n    switch (Object.prototype.toString.call(data)) {\n      case '[object Number]': {\n        const dataJSX = <span style={JsonStyle.numberStyle}>{data}</span>\n\n        return dataJSX\n      }\n\n      case '[object String]': {\n        const dataJSX = <span style={JsonStyle.stringStyle}>\"{data}\"</span>\n        return dataJSX\n      }\n\n      case '[object Boolean]': {\n        const dataJSX = data ? (\n          <span style={JsonStyle.booleanTrueStyle}>true</span>\n        ) : (\n          <span style={JsonStyle.booleanFalseStyle}>false</span>\n        )\n        return dataJSX\n      }\n\n      case '[object Object]': {\n        const dataJSX = []\n        dataJSX.push(\n          <React.Fragment key={'{'}>\n            <span style={JsonStyle.braceStyle}>{'{'}</span>\n            <br />\n          </React.Fragment>\n        )\n        const keys = Object.keys(data)\n        TabSpaceRepeatTimes++\n        for (const i in data) {\n          dataJSX.push(\n            <React.Fragment key={i}>\n              {repeatTabSpace(TabSpaceRepeatTimes)}\n              <span style={JsonStyle.propertyStyle}>{`\"` + i + `\"`}</span>\n              <span style={JsonStyle.colonStyle}>: </span>\n              {categorize(data[i])}\n              {i === keys[keys.length - 1] ? null : (\n                <span style={JsonStyle.commaStyle}>,</span>\n              )}\n              <br />\n            </React.Fragment>\n          )\n        }\n        TabSpaceRepeatTimes--\n        dataJSX.push(\n          <React.Fragment key={'}'}>\n            {repeatTabSpace(TabSpaceRepeatTimes)}\n            <span style={JsonStyle.braceStyle}>{'}'}</span>\n          </React.Fragment>\n        )\n        return dataJSX\n      }\n\n      case '[object Array]': {\n        const dataJSX = []\n\n        dataJSX.push(\n          <React.Fragment key='['>\n            <span style={JsonStyle.bracketStyle}>[</span>\n            <br />\n          </React.Fragment>\n        )\n        TabSpaceRepeatTimes++\n        for (let i = 0; i < data.length; i++) {\n          dataJSX.push(\n            <React.Fragment key={i}>\n              {repeatTabSpace(TabSpaceRepeatTimes)}\n              {categorize(data[i])}\n              {i === data.length - 1 ? null : (\n                <span style={JsonStyle.commaStyle}>,</span>\n              )}\n              <br />\n            </React.Fragment>\n          )\n        }\n        TabSpaceRepeatTimes--\n        dataJSX.push(\n          <React.Fragment key=']'>\n            {repeatTabSpace(TabSpaceRepeatTimes)}\n            <span style={JsonStyle.bracketStyle}>]</span>\n          </React.Fragment>\n        )\n        return dataJSX\n      }\n\n      case '[object Null]': {\n        const dataJSX = <span style={JsonStyle.nullStyle}>null</span>\n        return dataJSX\n      }\n      default:\n      // code block\n    }\n  }\n\n  return (\n    <div style={JsonStyle.style}>\n      <div>{categorize(jsonObject)}</div>\n    </div>\n  )\n}\n","import React from 'react'\r\n\r\nimport { JsonFormatter } from 'react-json-formatter'\r\n\r\nconst App = () => {\r\n  const sample = `{\r\n   \"string\":\"ABCDE\",\r\n   \"number\":1,\r\n   \"null\":null,\r\n   \"boolean\":true,\r\n   \"object\":{\r\n      \"string\":\"ABCDE\",\r\n      \"number\":1,\r\n      \"null\":null,\r\n      \"boolean\":true\r\n   },\r\n   \"array\":[\r\n      1,\r\n      2,\r\n      3,\r\n      4,\r\n      {\r\n      \"string\":\"ABCDE\",\r\n      \"number\":1,\r\n      \"null\":null,\r\n      \"boolean\":true,\r\n         \"array\":[\r\n      1,\r\n      2,\r\n      3,\r\n      4,\r\n      {\r\n      \"string\":\"ABCDE\",\r\n      \"number\":1,\r\n      \"null\":null,\r\n      \"boolean\":true\r\n   }\r\n   ]\r\n   }\r\n   ]\r\n}\r\n`\r\n\r\n  const JsonStyle = {\r\n    propertyStyle: { color: 'red' },\r\n    stringStyle: { color: 'green' },\r\n    numberStyle: { color: 'darkorange' }\r\n  }\r\n\r\n  return <JsonFormatter json={sample} tabWith='4' JsonStyle={JsonStyle} />\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}